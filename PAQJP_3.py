exec("""\nJ=input\nH=None\nG='utf-8'\nF=open\nE=print\nD=bytes\nC=bytearray\nB=range\nA=len\nimport os,sys,math as I,struct,array\nfrom typing import List,Dict,Tuple,Optional,Union\nfrom enum import Enum as K,IntEnum\nimport paq\nV='paqjp_2'\nL=9\nW=65536<<L\nX=L\nY=0\nZ=1\na=0\nb=0\nc=0\nM=[A for A in B(2,256)if all(A%B!=0 for B in B(2,int(A**.5)+1))]\nclass d(K):DEFAULT=0;JPEG=1;EXE=2;TEXT=3\nclass e(K):COMPRESS=0;DECOMPRESS=1\nclass f:\n	def __init__(A,s=''):A.data=C(s.encode(G))\n	def resize(B,new_size):\n		D=new_size\n		if D>A(B.data):B.data+=C(D-A(B.data))\n		else:B.data=B.data[:D]\n	def size(B):return A(B.data)\n	def c_str(A):return A.data.decode(G)\n	def __iadd__(A,s):A.data+=s.encode(G);return A\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __str__(A):return A.data.decode(G)\nclass N:\n	def __init__(A,size=0,initial_value=0):A.data=array.array('B',[initial_value]*size)\n	def resize(B,new_size):\n		C=new_size\n		if C>A(B.data):B.data.extend([0]*(C-A(B.data)))\n		else:B.data=B.data[:C]\n	def size(B):return A(B.data)\n	def __getitem__(A,index):return A.data[index]\n	def __setitem__(A,index,value):A.data[index]=value\n	def __len__(B):return A(B.data)\nclass O:\n	def __init__(A,size=0):A.size_=size;A.data=N(size);A.pos=0\n	def setsize(B,size):\n		A=size\n		if A>0 and A&A-1==0:B.size_=A;B.data.resize(A)\n	def __getitem__(A,index):return A.data[index&A.size_-1]\n	def __call__(A,i):return A.data[A.pos-i&A.size_-1]\n	def size(A):return A.size_\ng=O()\ndef P(data,repeat=50):\n	G=repeat;E=C(data)\n	for F in M:\n		H=F if F==2 else max(1,I.ceil(F/2/G))\n		for K in B(G):\n			for J in B(0,A(E),3):E[J]^=H\n	return D(E)\ndef Q(data):return D([A^255 for A in data])\ndef quit(message=H):\n	A=message\n	if A:E(A)\n	sys.exit(1)\ndef h(a,b):return a.lower()==b.lower()\ndef i(x):\n	if x<0:return 0\n	A=0\n	while x>0:x>>=1;A+=1\n	return A\ndef R(d):\n	A=[1,2,3,6,10,16,27,45,73,120,194,310,488,747,1101,1546,2047,2549,2994,3348,3607,3785,3901,3975,4022,4050,4068,4079,4085,4089,4092,4093,4094]\n	if d>2047:return 4095\n	if d<-2047:return 0\n	B=d&127;d=(d>>7)+16;return A[d]*(128-B)+A[d+1]*B+64>>7\ndef j(p):\n	A=N(4096);C=0\n	for D in B(-2047,2048):\n		E=R(D)\n		for F in B(C,E+1):A[F]=D\n		C=E+1\n	A[4095]=2047;return A[p]\ndef hash(*B):C=B[0]*200002979+B[1]*30005491+(B[2]if A(B)>2 else 4294967295)*50004239+(B[3]if A(B)>3 else 4294967295)*70004807+(B[4]if A(B)>4 else 4294967295)*110002499;return C^C>>9^B[0]>>2^B[1]>>3^(B[2]if A(B)>2 else 0)>>4^(B[3]if A(B)>3 else 0)>>5^(B[4]if A(B)>4 else 0)>>6\nclass S:\n	def __init__(A):A.table=[[1,2,0,0],[3,5,1,0],[4,6,0,1],[7,10,2,0],[8,12,1,1],[9,13,1,1],[11,14,0,2],[15,19,3,0],[16,23,2,1],[17,24,2,1],[18,25,2,1],[20,27,1,2],[21,28,1,2],[22,29,1,2],[26,30,0,3],[31,33,4,0],[32,35,3,1],[32,35,3,1],[32,35,3,1],[32,35,3,1],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[34,37,2,2],[36,39,1,3],[36,39,1,3],[36,39,1,3],[36,39,1,3],[38,40,0,4],[41,43,5,0],[42,45,4,1],[42,45,4,1],[44,47,3,2],[44,47,3,2],[46,49,2,3],[46,49,2,3],[48,51,1,4],[48,51,1,4],[50,52,0,5],[53,43,6,0],[54,57,5,1],[54,57,5,1],[56,59,4,2],[56,59,4,2],[58,61,3,3],[58,61,3,3],[60,63,2,4],[60,63,2,4],[62,65,1,5],[62,65,1,5],[50,66,0,6],[67,55,7,0],[68,57,6,1],[68,57,6,1],[70,73,5,2],[70,73,5,2],[72,75,4,3],[72,75,4,3],[74,77,3,4],[74,77,3,4],[76,79,2,5],[76,79,2,5],[62,81,1,6],[62,81,1,6],[64,82,0,7],[83,69,8,0],[84,71,7,1],[84,71,7,1],[86,73,6,2],[86,73,6,2],[44,59,5,3],[44,59,5,3],[58,61,4,4],[58,61,4,4],[60,49,3,5],[60,49,3,5],[76,89,2,6],[76,89,2,6],[78,91,1,7],[78,91,1,7],[80,92,0,8],[93,69,9,0],[94,87,8,1],[94,87,8,1],[96,45,7,2],[96,45,7,2],[48,99,2,7],[48,99,2,7],[88,101,1,8],[88,101,1,8],[80,102,0,9],[103,69,10,0],[104,87,9,1],[104,87,9,1],[106,57,8,2],[106,57,8,2],[62,109,2,8],[62,109,2,8],[88,111,1,9],[88,111,1,9],[80,112,0,10],[113,85,11,0],[114,87,10,1],[114,87,10,1],[116,57,9,2],[116,57,9,2],[62,119,2,9],[62,119,2,9],[88,121,1,10],[88,121,1,10],[90,122,0,11],[123,85,12,0],[124,97,11,1],[124,97,11,1],[126,57,10,2],[126,57,10,2],[62,129,2,10],[62,129,2,10],[98,131,1,11],[98,131,1,11],[90,132,0,12],[133,85,13,0],[134,97,12,1],[134,97,12,1],[136,57,11,2],[136,57,11,2],[62,139,2,11],[62,139,2,11],[98,141,1,12],[98,141,1,12],[90,142,0,13],[143,95,14,0],[144,97,13,1],[144,97,13,1],[68,57,12,2],[68,57,12,2],[62,81,2,12],[62,81,2,12],[98,147,1,13],[98,147,1,13],[100,148,0,14],[149,95,15,0],[150,107,14,1],[150,107,14,1],[108,151,1,14],[108,151,1,14],[100,152,0,15],[153,95,16,0],[154,107,15,1],[108,155,1,15],[100,156,0,16],[157,95,17,0],[158,107,16,1],[108,159,1,16],[100,160,0,17],[161,105,18,0],[162,107,17,1],[108,163,1,17],[110,164,0,18],[165,105,19,0],[166,117,18,1],[118,167,1,18],[110,168,0,19],[169,105,20,0],[170,117,19,1],[118,171,1,19],[110,172,0,20],[173,105,21,0],[174,117,20,1],[118,175,1,20],[110,176,0,21],[177,105,22,0],[178,117,21,1],[118,179,1,21],[110,180,0,22],[181,115,23,0],[182,117,22,1],[118,183,1,22],[120,184,0,23],[185,115,24,0],[186,127,23,1],[128,187,1,23],[120,188,0,24],[189,115,25,0],[190,127,24,1],[128,191,1,24],[120,192,0,25],[193,115,26,0],[194,127,25,1],[128,195,1,25],[120,196,0,26],[197,115,27,0],[198,127,26,1],[128,199,1,26],[120,200,0,27],[201,115,28,0],[202,127,27,1],[128,203,1,27],[120,204,0,28],[205,115,29,0],[206,127,28,1],[128,207,1,28],[120,208,0,29],[209,125,30,0],[210,127,29,1],[128,211,1,29],[130,212,0,30],[213,125,31,0],[214,137,30,1],[138,215,1,30],[130,216,0,31],[217,125,32,0],[218,137,31,1],[138,219,1,31],[130,220,0,32],[221,125,33,0],[222,137,32,1],[138,223,1,32],[130,224,0,33],[225,125,34,0],[226,137,33,1],[138,227,1,33],[130,228,0,34],[229,125,35,0],[230,137,34,1],[138,231,1,34],[130,232,0,35],[233,125,36,0],[234,137,35,1],[138,235,1,35],[130,236,0,36],[237,125,37,0],[238,137,36,1],[138,239,1,36],[130,240,0,37],[241,125,38,0],[242,137,37,1],[138,243,1,37],[130,244,0,38],[245,135,39,0],[246,137,38,1],[138,247,1,38],[140,248,0,39],[249,135,40,0],[250,69,39,1],[80,251,1,39],[140,252,0,40],[249,135,41,0],[250,69,40,1],[80,251,1,40],[140,252,0,41]]\n	def nex(A,state,sel):return A.table[state][sel]\nk=S()\nclass T:\n	def __init__(A):A.compressor=H;A.PRIMES=M\n	def huffman_compress(A,data):return A.compress_with_best_method(data)\n	def huffman_decompress(A,data):return A.decompress_with_best_method(data)\n	def transform_with_prime_xor_every_3_bytes(A,data):return P(data)\n	def reverse_transform_with_prime_xor_every_3_bytes(A,data):return A.transform_with_prime_xor_every_3_bytes(data)\n	def transform_with_pattern(A,data):return Q(data)\n	def reverse_transform_with_pattern(A,data):return A.transform_with_pattern(data)\n	def transform_03(G,data):\n		H=sum(50*(A if A==2 else I.ceil(A/100))for A in G.PRIMES)%256;E=C(data)\n		for F in B(0,A(E),3):E[F]=(E[F]-H)%256\n		return D(E)\n	def reverse_transform_03(G,data):\n		H=sum(50*(A if A==2 else I.ceil(A/100))for A in G.PRIMES)%256;E=C(data)\n		for F in B(0,A(E),3):E[F]=(E[F]+H)%256\n		return D(E)\n	def transform_04(G,data):\n		E=C(data)\n		for F in B(A(E)):E[F]=(E[F]-F%256)%256\n		return D(E)\n	def reverse_transform_04(G,data):\n		E=C(data)\n		for F in B(A(E)):E[F]=(E[F]+F%256)%256\n		return D(E)\n	def compress_with_best_method(B,data):\n		J=[(1,B.transform_with_prime_xor_every_3_bytes),(2,B.transform_with_pattern),(3,B.transform_03),(4,B.transform_04)];C=H;E=float('inf');F=H\n		for(K,L)in J:\n			M=L(data);G=B.paq_compress(M);I=A(G)\n			if I<E:E=I;C=G;F=K\n		return D([F])+C\n	def decompress_with_best_method(B,data):\n		C=data\n		if A(C)<1:return b''\n		D=C[0];F=C[1:];G=B.paq_decompress(F);E={1:B.reverse_transform_with_prime_xor_every_3_bytes,2:B.reverse_transform_with_pattern,3:B.reverse_transform_03,4:B.reverse_transform_04}\n		if D in E:return E[D](G)\n		else:raise ValueError(f"Unknown compression method marker: {D}")\n	def paq_compress(A,data):return paq.compress(data)\n	def paq_decompress(A,data):return paq.decompress(data)\ndef U():\n	E('Created by Jurijus Pacalovas.');I=J('Choose action - Compress (1) or Extract (2): ').strip()\n	if I not in('1','2'):E('Invalid action. Exiting.');return\n	B=J('Input file name: ').strip();C=J('Output file name: ').strip()\n	if not os.path.isfile(B):E(f"Error: Input file '{B}' does not exist.");return\n	K=T()\n	if I=='1':\n		with F(B,'rb')as D:G=D.read()\n		L=K.compress_with_best_method(G)\n		with F(C,'wb')as H:H.write(L)\n		E(f"Compression successful. Output saved to {C}. Size: {A(L)} bytes")\n	else:\n		with F(B,'rb')as D:G=D.read()\n		try:\n			M=K.decompress_with_best_method(G)\n			with F(C,'wb')as H:H.write(M)\n			E(f"Decompression successful. Output saved to {C}.")\n		except Exception as N:E('Error during decompression:',N)\nif __name__=='__main__':U()\n""")
